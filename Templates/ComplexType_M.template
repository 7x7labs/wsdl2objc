@implementation %«className»

- (id)init
{
	if((self = [super init])) {
%IFDEF sequenceElements
%FOREACH element in sequenceElements

%IF element.useAnArray
		%«element.name» = [[NSMutableArray alloc] init];
%ELSE
		%«element.name» = 0;
%ENDIF

%ENDFOR
%ENDIF

%IFDEF attributes
%FOREACH attribute in attributes
		%«attribute.name» = 0;
%ENDFOR
%ENDIF

	}
	
	return self;
}

- (void)dealloc
{
%IFDEF sequenceElements
%FOREACH element in sequenceElements
%IFEQ element.type.assignOrRetain retain
	if(%«element.name» != nil) [%«element.name» release];
%ENDIF
%ENDFOR
%ENDIF

%IFDEF attributes
%FOREACH attribute in attributes
%IFEQ attribute.type.assignOrRetain retain
	if(%«attribute.name» != nil) [%«attribute.name» release];
%ENDIF
%ENDFOR
%ENDIF
	
	[super dealloc];
}

- (NSString *)nsPrefix
{
	return @"%«schema.prefix»";
}

- (xmlNodePtr)xmlNodeForDoc:(xmlDocPtr)doc elementName:(NSString *)elName
{
	xmlNodePtr root = xmlDocGetRootElement(doc);
	
	//xmlNsPtr ns = xmlSearchNs(doc, root, (const xmlChar*)"%«schema.prefix»");
	xmlNsPtr xsi = xmlSearchNs(doc, root, (const xmlChar*)"xsi");
	
	xmlNodePtr node = xmlNewDocNode(doc, NULL, (const xmlChar*)[elName UTF8String], NULL);
	xmlSetNsProp(node, xsi, (const xmlChar*)"type", (const xmlChar*)"%«schema.prefix»:%«typeName»");
	
	[self addAttributesToNode:node];
	
%IF hasSequenceElements
	[self addElementsToNode:node];
%ENDIF
	
	return node;
}

- (void)addAttributesToNode:(xmlNodePtr)node
{
%IFDEF superClass
%IF superClassIsComplex
	[super addAttributesToNode:node];
%ENDIF
%ENDIF
	
%IFDEF attributes
	char buf[20];
%FOREACH attribute in attributes
	if(self.%«attribute.name» != 0) {
%IFEQ attribute.type.assignOrRetain retain
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", (const xmlChar*)[[self.%«attribute.name» description] UTF8String]);
%ELSIFEQ attribute.type.typeName boolean
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", (*self.%«attribute.name» ? (const xmlChar*)"true" : (const xmlChar*)"false"));
%ELSIFEQ attribute.type.typeName long
		sprintf(buf, "%d", *self.%«attribute.name»);
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", buf);
%ELSIFEQ attribute.type.typeName short
		sprintf(buf, "%d", *self.%«attribute.name»);
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", buf);
%ELSIFEQ attribute.type.typeName int
		sprintf(buf, "%d", *self.%«attribute.name»);
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", buf);
%ELSIFEQ attribute.type.typeName double
		sprintf(buf, "%f", *self.%«attribute.name»);
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", buf);
%ELSIFNEQ attribute.type.enumCount 0
		xmlSetProp(node, (const xmlChar*)"%«attribute.wsdlName»", (const xmlChar*)[%«attribute.type.className»_stringFromEnum(self.%«attribute.name») UTF8String]);
%ENDIF
	}

%ENDFOR
%ENDIF
}

- (void)addElementsToNode:(xmlNodePtr)node
{
	NSMutableString *serializedForm = [NSMutableString string];
	
%IFDEF superClass
%IF superClassIsComplex
	[super addElementsToNode:node];
%ENDIF
%ENDIF
	
%IFDEF sequenceElements
	xmlDocPtr doc = node->doc;
	char buf[20];
%FOREACH element in sequenceElements
	if(self.%«element.name» != 0) {
%IFEQ element.type.assignOrRetain retain

%IF element.useAnArray
		for(%«element.type.classNameWithPtr» child in self.%«element.name») {
			xmlAddChild(node, [child xmlNodeForDoc:doc elementName:@"%«element.wsdlName»"]);
		}
%ELSE
		xmlAddChild(node, [self.%«element.name» xmlNodeForDoc:doc elementName:@"%«element.wsdlName»"]);
%ENDIF

%ELSIFEQ element.type.typeName boolean
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", (*self.%«element.name» ? (const xmlChar*)"true" : (const xmlChar*)"false"));
%ELSIFEQ element.type.typeName long
		sprintf(buf, "%d", *self.%«element.name»);
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", buf);
%ELSIFEQ element.type.typeName short
		sprintf(buf, "%d", *self.%«element.name»);
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", buf);
%ELSIFEQ element.type.typeName int
		sprintf(buf, "%d", *self.%«element.name»);
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", buf);
%ELSIFEQ element.type.typeName double
		sprintf(buf, "%f", *self.%«element.name»);
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", buf);
%ELSIFNEQ element.type.enumCount 0

%IF element.useAnArray
		for(NSNumber *intRepresentation in self.%«element.name») {
			%«element.type.className» enumRepresentation = (%«element.type.className»)[intRepresentation intValue];
			xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", (const xmlChar*)[%«element.type.className»_stringFromEnum(enumRepresentation) UTF8String]);
		}
%ELSE
		xmlNewChild(node, NULL, (const xmlChar*)"%«element.wsdlName»", (const xmlChar*)[%«element.type.className»_stringFromEnum(self.%«element.name») UTF8String]);
%ENDIF

%ENDIF
	}
%ENDFOR
%ENDIF
}

/* elements */
%IFDEF sequenceElements
%FOREACH element in sequenceElements

%IF element.useAnArray

@synthesize %«element.name»;

- (void)add%«element.uname»:(%«element.type.classNameWithPtr»)toAdd
{
%IFEQ element.type.assignOrRetain assign
	[%«element.name» addObject:[NSNumber numberWithInt:(int)toAdd]];
%ELSE
	if(toAdd != nil) [%«element.name» addObject:toAdd];
%ENDIF
}

%ELSE

@synthesize %«element.name»;

%ENDIF

%ENDFOR
%ENDIF


/* attributes */
%IFDEF attributes

- (NSDictionary *)attributes
{
	NSMutableDictionary *attributes = [NSMutableDictionary dictionary];
%FOREACH attribute in attributes
%IFEQ attribute.type.assignOrRetain retain
	[attributes setObject:self.%«attribute.name» forKey:@"%«attribute.wsdlName»"];
%ELSE
	[attributes setObject:[NSNumber numberWithInt:(int)self.%«attribute.name»] forKey:@"%«attribute.wsdlName»"];
%ENDIF
%ENDFOR
	
	return attributes;
}

%FOREACH attribute in attributes

@synthesize %«attribute.name»;

%ENDFOR
%ENDIF


+ (%«classNameWithPtr»)deserializeNode:(xmlNodePtr)cur
{
	%«className» *newObject = [[%«className» new] autorelease];
	
	[newObject deserializeAttributesFromNode:cur];
	[newObject deserializeElementsFromNode:cur];
	
	return newObject;
}

- (void)deserializeAttributesFromNode:(xmlNodePtr)cur
{

%IFDEF superClass
%IF superClassIsComplex
	[super deserializeAttributesFromNode:cur];
%ENDIF
%ENDIF

%IF hasAttributes
	xmlChar *attrValue = NULL;
	NSString *attrString;
	
%FOREACH attribute in attributes
	attrValue = xmlGetProp(cur, (const xmlChar *) "%«attribute.wsdlName»");
	if(attrValue != NULL) {
		attrString = [NSString stringWithCString:(char*)attrValue encoding:NSUTF8StringEncoding];

%IFEQ attribute.type.typeName boolean
		self.%«attribute.name» = [[[USBoolean alloc] initWithBool:([attrString boolValue] ? YES : NO)] autorelease];
%ELSIFEQ attribute.type.typeName long
		self.%«attribute.name» = [NSNumber numberWithLong:[attrString longValue]];
%ELSIFEQ attribute.type.typeName long
		self.%«attribute.name» = [NSNumber numberWithShort:[attrString shortValue]];
%ELSIFEQ attribute.type.typeName int
		self.%«attribute.name» = [NSNumber numberWithInt:[attrString intValue]];
%ELSIFEQ attribute.type.typeName double
		self.%«attribute.name» = [NSNumber numberWithDouble:[attrString doubleValue]];
%ELSIFEQ attribute.type.typeName float
		self.%«attribute.name» = [NSNumber numberWithFloat:[attrString doubleValue]];
%ELSIFEQ attribute.type.typeName string
		self.%«attribute.name» = attrString;
%ELSIFEQ attribute.type.typeName dateTime
		self.%«attribute.name» = [NSDate dateWithString:attrString];
%ELSIFEQ attribute.type.typeName date
		self.%«attribute.name» = [NSDate dateWithString:attrString];
%ELSIFEQ attribute.type.typeName base64Binary
		self.%«attribute.name» = [NSData dataWithBase64EncodedString:base64Binary];
%ELSIFEQ attribute.type.typeName decimal
		self.%«attribute.name» = [NSNumber numberWithDouble:[attrString doubleValue]];
%ELSIFEQ attribute.type.typeName QName
		self.%«attribute.name» = attrString;
%ELSIFEQ attribute.type.typeName token
		self.%«attribute.name» = attrString;
%ELSIFEQ attribute.type.typeName anyType
		self.%«attribute.name» = attrString;
%ELSIFNEQ attribute.type.enumCount 0
		self.%«attribute.name» = %«attribute.type.className»_enumFromString(attrString);
%ELSE
#warning Not handling attribute %«attribute.name» with type %«attribute.type.typeName»
%ENDIF
		xmlFree(attrValue);
	}
%ENDFOR
%ENDIF
}

- (void)deserializeElementsFromNode:(xmlNodePtr)cur
{
	
%IFDEF superClass
%IF superClassIsComplex
	[super deserializeElementsFromNode:cur];
%ENDIF
%ENDIF
	
%IF hasSequenceElements
	for( cur = cur->children ; cur != NULL ; cur = cur->next ) {
		if(cur->type == XML_ELEMENT_NODE) {
			xmlChar *elementText = xmlNodeListGetString(cur->doc, cur->children, 1);
			NSString *elementString = nil;
			
			if(elementText != NULL) {
				elementString = [NSString stringWithCString:(char*)elementText encoding:NSUTF8StringEncoding];
				[elementString self]; // avoid compiler warning for unused var
				xmlFree(elementText);
			}
%FOREACH element in sequenceElements
			if(xmlStrEqual(cur->name, (const xmlChar *) "%«element.wsdlName»")) {
%IFEQ element.type.assignOrRetain retain
				
				Class elementClass = nil;
				xmlChar *instanceType = xmlGetNsProp(cur, (const xmlChar *) "type", (const xmlChar *) "http://www.w3.org/2001/XMLSchema-instance");
				if(instanceType == NULL) {
					elementClass = [%«element.type.classNameWithoutPtr» class];
				} else {
					NSString *elementTypeString = [NSString stringWithCString:(char*)instanceType encoding:NSUTF8StringEncoding];
					
					NSArray *elementTypeArray = [elementTypeString componentsSeparatedByString:@":"];
					
					NSString *elementClassString = nil;
					if([elementTypeArray count] > 1) {
						NSString *prefix = [elementTypeArray objectAtIndex:0];
						NSString *localName = [elementTypeArray objectAtIndex:1];
						
						xmlNsPtr elementNamespace = xmlSearchNs(cur->doc, cur, (const xmlChar *)[prefix UTF8String]);
						
						NSString *standardPrefix = [[USGlobals sharedInstance].wsdlStandardNamespaces objectForKey:[NSString stringWithCString:(char*)elementNamespace->href encoding:NSUTF8StringEncoding]];
						
						elementClassString = [NSString stringWithFormat:@"%@_%@", standardPrefix, localName];
					} else {
						elementClassString = [elementTypeString stringByReplacingOccurrencesOfString:@":" withString:@"_" options:0 range:NSMakeRange(0, [elementTypeString length])];
					}
					
					elementClass = NSClassFromString(elementClassString);
					xmlFree(instanceType);
				}
				
				id newChild = [elementClass deserializeNode:cur];
				
%IF element.useAnArray
				if(newChild != nil) [self.%«element.name» addObject:newChild];
%ELSE
				self.%«element.name» = newChild;
%ENDIF

%ELSIFEQ element.type.typeName boolean
				self.%«element.name» = malloc(sizeof(%«element.type.classNameWithoutPtr»));
				*self.%«element.name» = ([elementString boolValue] ? YES : NO);

%ELSIFEQ element.type.typeName long
				self.%«element.name» = malloc(sizeof(%«element.type.classNameWithoutPtr»));
				*self.%«element.name» = (long)[elementString longLongValue];

%ELSIFEQ element.type.typeName short
				self.%«element.name» = malloc(sizeof(%«element.type.classNameWithoutPtr»));
				*self.%«element.name» = (short)[elementString longLongValue];

%ELSIFEQ element.type.typeName int
				self.%«element.name» = malloc(sizeof(%«element.type.classNameWithoutPtr»));
				*self.%«element.name» = [elementString intValue];

%ELSIFEQ element.type.typeName double
				self.%«element.name» = malloc(sizeof(%«element.type.classNameWithoutPtr»));
				*self.%«element.name» = [elementString doubleValue];

%ELSIFNEQ element.type.enumCount 0
				
				%«element.type.className» enumRepresentation = %«element.type.className»_enumFromString(elementString);
%IF element.useAnArray
				NSNumber *intRepresentation = [NSNumber numberWithInt:(int)enumRepresentation];
				[self.%«element.name» addObject:intRepresentation];
%ELSE
				self.%«element.name» = enumRepresentation;
%ENDIF

%ELSE
#warning Not handling element %«element.name» with type %«element.type.typeName»

%ENDIF
			}
%ENDFOR
		}
	}
%ENDIF

}

@end