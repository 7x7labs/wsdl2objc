
@class %«className»Response;
@class %«className»Operation;

@protocol %«className»ResponseDelegate <NSObject>
- (void) operation:(%«className»Operation *)operation completedWithResponse:(%«className»Response *)response;

@end

@interface %«className» : NSObject <%«className»ResponseDelegate> {
	NSURL *address;
	NSTimeInterval timeout;
	NSMutableArray *cookies;
	NSMutableDictionary *customHeaders;
	BOOL logXMLInOut;
	BOOL synchronousOperationComplete;
	NSString *authUsername;
	NSString *authPassword;
}

@property (nonatomic, copy) NSURL *address;
@property (nonatomic) BOOL logXMLInOut;
@property (nonatomic) NSTimeInterval timeout;
@property (nonatomic, retain) NSMutableArray *cookies;
@property (nonatomic, retain) NSMutableDictionary *customHeaders;
@property (nonatomic, retain) NSString *authUsername;
@property (nonatomic, retain) NSString *authPassword;

+ (NSTimeInterval) defaultTimeout;

- (id)initWithAddress:(NSString *)anAddress;
- (void)sendHTTPCallUsingBody:(NSString *)body soapAction:(NSString *)soapAction forOperation:(%«className»Operation *)operation;
- (void)addCookie:(NSHTTPCookie *)toAdd;
- (NSString *)MIMEType;

%FOREACH operation in operations
- (%«className»Response *)%«operation.invokeString»;
- (void)%«operation.asyncInvokeString» delegate:(id<%«className»ResponseDelegate>)responseDelegate;
%ENDFOR

@end

@interface %«className»Operation : NSOperation {
	%«className» *binding;
	%«className»Response *response;
	id<%«className»ResponseDelegate> delegate;
	NSMutableData *responseData;
	NSURLConnection *urlConnection;
}

@property (nonatomic, retain) %«className» *binding;
@property (nonatomic, readonly) %«className»Response *response;
@property (nonatomic, assign) id<%«className»ResponseDelegate> delegate;
@property (nonatomic, retain) NSMutableData *responseData;
@property (nonatomic, retain) NSURLConnection *urlConnection;

- (id)initWithBinding:(%«className» *)aBinding delegate:(id<%«className»ResponseDelegate>)aDelegate;

@end

%FOREACH operation in operations
@interface %«className»_%«operation.name» : %«className»Operation {
%FOREACH part in operation.input.body.parts
%IFDEF part.element.type.classNameWithPtr
	%«part.element.type.classNameWithPtr» %«part.name»;
%ENDIF
%ENDFOR
%FOREACH header in operation.input.headers
%IFDEF header.type.classNameWithPtr
	%«header.type.classNameWithPtr» %«header.name»;
%ENDIF
%ENDFOR
}

%FOREACH part in operation.input.body.parts
@property (nonatomic, %«part.element.type.assignOrRetain») %«part.element.type.classNameWithPtr» %«part.name»;
%ENDFOR
%FOREACH header in operation.input.headers
@property (nonatomic, %«header.type.assignOrRetain») %«header.type.classNameWithPtr» %«header.name»;
%ENDFOR

- (id)initWithBinding:(%«className» *)aBinding delegate:(id<%«className»ResponseDelegate>)aDelegate
%FOREACH part in operation.input.body.parts
	%«part.name»:(%«part.element.type.classNameWithPtr»)a%«part.uname»
%ENDFOR
%FOREACH header in operation.input.headers
	%«header.name»:(%«header.type.classNameWithPtr»)a%«header.uname»
%ENDFOR
;

@end
%ENDFOR

@interface %«className»_envelope : NSObject {

}

+ (%«className»_envelope *)sharedInstance;

- (NSString *)serializedFormUsingHeaderElements:(NSDictionary *)headerElements bodyElements:(NSDictionary *)bodyElements bodyKeys:(NSArray *)bodyKeys;

@end

@interface %«className»Response : NSObject {
	NSArray *headers;
	NSArray *bodyParts;
	NSError *error;
}

@property (nonatomic, retain) NSArray *headers;
@property (nonatomic, retain) NSArray *bodyParts;
@property (nonatomic, retain) NSError *error;

@end
