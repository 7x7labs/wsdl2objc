#import "%«prefix».h"

#import "NSDate+ISO8601Parsing.h"
#import "NSDate+ISO8601Unparsing.h"

#import <libxml/xmlstring.h>
#if TARGET_OS_IPHONE
#import <CFNetwork/CFNetwork.h>
#endif

#ifndef ADVANCED_AUTHENTICATION
#define ADVANCED_AUTHENTICATION 0
#endif

#if ADVANCED_AUTHENTICATION && TARGET_OS_IPHONE
#import <Security/Security.h>
#endif

static void decode_object(id obj, NSCoder *decoder) {
	if (!obj) return;

	@autoreleasepool {
		Ivar *ivars = class_copyIvarList([obj class], NULL);
		for (Ivar *ivar = ivars; ivar && *ivar; ++ivar) {
			NSString *key = [NSString stringWithUTF8String:ivar_getName(*ivar)];
			[obj setValue:[decoder decodeObjectForKey:key] ?: @0.0f forKey:key];
		}
		free(ivars);
	}
}

static void encode_object(id obj, NSCoder *encoder) {
	@autoreleasepool {
		Ivar *ivars = class_copyIvarList([obj class], NULL);
		for (Ivar *ivar = ivars; ivar && *ivar; ++ivar) {
			NSString *key = [NSString stringWithUTF8String:ivar_getName(*ivar)];
			[encoder encodeObject:[obj valueForKey:key] forKey:key];
		}
		free(ivars);
	}
}

static NSString *xmlStringToNSString(xmlChar *str) {
	if (!str) return nil;
	NSString *ret = [NSString stringWithCString:(char *)str encoding:NSUTF8StringEncoding];
	xmlFree(str);
	return ret;
}

static Class classForElement(xmlNodePtr cur) {
	NSString *instanceType = xmlStringToNSString(xmlGetNsProp(cur, (const xmlChar *)"type", (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"));
	if (!instanceType) return nil;

	NSArray *elementTypeArray = [instanceType componentsSeparatedByString:@":"];

	Class elementClass;
	if ([elementTypeArray count] > 1) {
		NSString *prefix = elementTypeArray[0];
		NSString *localName = elementTypeArray[1];
		xmlNsPtr elementNamespace = xmlSearchNs(cur->doc, cur, [prefix xmlString]);
		NSString *standardPrefix = USGlobals.sharedInstance.wsdlStandardNamespaces[[NSString stringWithCString:(char *)elementNamespace->href encoding:NSUTF8StringEncoding]];

		elementClass = NSClassFromString([NSString stringWithFormat:@"%@_%@", standardPrefix, localName]);
	}
	else
		elementClass = NSClassFromString([instanceType stringByReplacingOccurrencesOfString:@":" withString:@"_"]);

	return elementClass;
}

static NSString *NSStringFromNodeList(xmlNodePtr node) {
	return xmlStringToNSString(xmlNodeListGetString(node->doc, node->children, 1));
}

static xmlNodePtr makeXmlNode(xmlDocPtr doc, NSString *elName, NSString* elNSPrefix, NSString *content) {
	NSString *nodeName = elName;
	if ([elNSPrefix length])
		nodeName = [NSString stringWithFormat:@"%@:%@", elNSPrefix, elName];

	return xmlNewDocNode(doc, NULL, [nodeName xmlString], [content xmlString]);
}
